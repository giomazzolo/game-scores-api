// Code generated by ent, DO NOT EDIT.

package ent

import (
	"game-scores/ent/game"
	"game-scores/ent/schema"
	"game-scores/ent/score"
	"game-scores/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	gameFields := schema.Game{}.Fields()
	_ = gameFields
	// gameDescName is the schema descriptor for name field.
	gameDescName := gameFields[0].Descriptor()
	// game.NameValidator is a validator for the "name" field. It is called by the builders before save.
	game.NameValidator = gameDescName.Validators[0].(func(string) error)
	scoreFields := schema.Score{}.Fields()
	_ = scoreFields
	// scoreDescValue is the schema descriptor for value field.
	scoreDescValue := scoreFields[0].Descriptor()
	// score.ValueValidator is a validator for the "value" field. It is called by the builders before save.
	score.ValueValidator = scoreDescValue.Validators[0].(func(int64) error)
	// scoreDescCreatedAt is the schema descriptor for created_at field.
	scoreDescCreatedAt := scoreFields[1].Descriptor()
	// score.DefaultCreatedAt holds the default value on creation for the created_at field.
	score.DefaultCreatedAt = scoreDescCreatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[2].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = userDescPasswordHash.Validators[0].(func(string) error)
}
